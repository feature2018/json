{"name":"Json","tagline":"User friendly Json","body":"# Streametry Json\r\n\r\nMini library for handling JSON objects in Java. Goals:\r\n\r\n- Increase convenience\r\n- Minimise verbosity \r\n- Play well with Nashorn JavaScript engine from Java 8\r\n\r\nIn essence `Json` is just a thin wrapper around a `Map` where properties are stored. There are lots of functions to manipulate a `Map` such as in Guava or Apache Commons, and you should be able to re-use them. Additional `Map` utilities are provided here. \r\n\r\n     Json addr = new Json() {\r\n    \tString host = \"localhost\";\r\n    \tint port = 80;\r\n    };\r\n    \t \r\n    addr.toString(); \t// {\"host\": \"localhost\", \"port\": 80}\r\n    addr.set(\"path\", \"/\").set(\"proto\", \"http\");\r\n    addr.get(\"port\"); \t// 80\r\n\r\nSee tests for more examples.\t\r\n\r\n## Features\r\n\r\n - Simple and convenient constructors\r\n - Implements `Map` interface so you can treat it like a Map of Maps\r\n - JDK8 Nashorn compatible - use it in JavaScript functions\r\n - Convenience methods for building and getting values\r\n - Serialize to/from String\r\n - Access properties without explicit casting\r\n - Provides `equals`/`hashCode`, so you can store Json in collections\r\n\r\n## Download\r\n\r\nGrab it from [Maven central](http://search.maven.org/#search%7Cga%7C1%7Cstreametry-json):\r\n\r\n- **group**: 'com.streametry', **name**: 'streametry-json', **version**: '1.0.1'\r\n\r\n## Constructors\r\n\r\n    new Json(\"{port: 80}\"); // from string\r\n    new Json( hashMap );  // from map\r\n    new Json(\"port\", 80); // key-value\r\n    new Json() { int port = 80; } // from fields \r\n\r\n## Operations\r\n\r\n    Json json = new Json().set(\"port\", 80)\r\n                          .set(\"host\", \"localhost\"); // chain calls\r\n    \r\n    int port = json.get(\"port\", 0); // get or return default. avoid casting \r\n     \r\n    Json nested = json.at(\"path\", \"to\", \"nested\"); // json.path.to.nested\r\n    \r\n    json.merge( anotherJson ); // merge values recursively\r\n    \r\n    json.copy(); // deep copy\r\n\r\nAs well as all the methods from `Map`:\r\n\r\n   - isEmpty(), keySet(), containsKey(), entrySet(), ...\r\n    \r\n## Scripting usage\r\n\r\nYou can pass `Json` to Nashorn JavaScript functions and treat it like a native JSON object:\r\n\r\n    Json addr = new Json(\"port\", 80);\r\n\r\n    scriptEngine.eval(\"function nextPort(addr) { addr.port++; }\");\r\n\r\n    invocable.invokeFunction(\"nextPort\", addr);\r\n\t\t\r\n    out.println( addr.get(\"port\") ); // 81\r\n             \r\n## Build\r\n\r\n    gradle jar\r\n    \r\nNote: running tests requires JDK 8 due to Nashorn tests. Java 6 is required for compiling and building the jar.\r\n\r\n## License\r\n\r\nMIT\r\n\r\n\r\n","google":"UA-54149561-1","note":"Don't delete this file! It's used internally to help with page regeneration."}